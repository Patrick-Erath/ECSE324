
//campus.mcgill.ca/emf/CPE/aatass1/Desktop/G02_Lab4/main.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 70 0c 00 00 74 0c 00 00 78 0c 00 00     @...p...t...x...
  30:	7c 0c 00 00 6c 0c 00 00 80 0c 00 00 84 0c 00 00     |...l...........

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0002cb 	bl	c08 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000d6c 	.word	0x00000d6c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	000011a8 	.word	0x000011a8

00000124 <__cs3_heap_start_ptr>:
 124:	000011d0 	.word	0x000011d0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	000011b0 	.word	0x000011b0
 170:	000011b3 	.word	0x000011b3
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	000011b0 	.word	0x000011b0
 1bc:	000011b0 	.word	0x000011b0
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	000011b0 	.word	0x000011b0
 200:	00000000 	.word	0x00000000
 204:	00000d10 	.word	0x00000d10

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000d10 	.word	0x00000d10
 250:	000011b4 	.word	0x000011b4
 254:	00000d70 	.word	0x00000d70
 258:	00000000 	.word	0x00000000

0000025c <test_char>:
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/pushbuttons.h"
#include "./drivers/inc/ps2_keyboard.h"
#include "./drivers/inc/audio_port.h"

void test_char() {
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd010 	sub	sp, sp, #16
		int x,y;
		char c = 0;
 268:	e3a03000 	mov	r3, #0
 26c:	e54b300d 	strb	r3, [r11, #-13]
		
		for(y=0 ; y<=59 ; y++)
 270:	e3a03000 	mov	r3, #0
 274:	e50b300c 	str	r3, [r11, #-12]
 278:	ea000013 	b	2cc <test_char+0x70>
			for(x=0 ; x<=79 ; x++)
 27c:	e3a03000 	mov	r3, #0
 280:	e50b3008 	str	r3, [r11, #-8]
 284:	ea00000a 	b	2b4 <test_char+0x58>
				VGA_write_char_ASM(x,y,c++);
 288:	e55b300d 	ldrb	r3, [r11, #-13]
 28c:	e55b200d 	ldrb	r2, [r11, #-13]
 290:	e2822001 	add	r2, r2, #1
 294:	e54b200d 	strb	r2, [r11, #-13]
 298:	e51b0008 	ldr	r0, [r11, #-8]
 29c:	e51b100c 	ldr	r1, [r11, #-12]
 2a0:	e1a02003 	mov	r2, r3
 2a4:	eb0000ab 	bl	558 <VGA_write_char_ASM>
void test_char() {
		int x,y;
		char c = 0;
		
		for(y=0 ; y<=59 ; y++)
			for(x=0 ; x<=79 ; x++)
 2a8:	e51b3008 	ldr	r3, [r11, #-8]
 2ac:	e2833001 	add	r3, r3, #1
 2b0:	e50b3008 	str	r3, [r11, #-8]
 2b4:	e51b3008 	ldr	r3, [r11, #-8]
 2b8:	e353004f 	cmp	r3, #79	; 0x4f
 2bc:	dafffff1 	ble	288 <test_char+0x2c>

void test_char() {
		int x,y;
		char c = 0;
		
		for(y=0 ; y<=59 ; y++)
 2c0:	e51b300c 	ldr	r3, [r11, #-12]
 2c4:	e2833001 	add	r3, r3, #1
 2c8:	e50b300c 	str	r3, [r11, #-12]
 2cc:	e51b300c 	ldr	r3, [r11, #-12]
 2d0:	e353003b 	cmp	r3, #59	; 0x3b
 2d4:	daffffe8 	ble	27c <test_char+0x20>
			for(x=0 ; x<=79 ; x++)
				VGA_write_char_ASM(x,y,c++);
	}
 2d8:	e24bd004 	sub	sp, r11, #4
 2dc:	e8bd8800 	pop	{r11, pc}

000002e0 <test_byte>:

	void test_byte() {
 2e0:	e92d4800 	push	{r11, lr}
 2e4:	e28db004 	add	r11, sp, #4
 2e8:	e24dd010 	sub	sp, sp, #16
		int x,y;
		char c = 0;
 2ec:	e3a03000 	mov	r3, #0
 2f0:	e54b300d 	strb	r3, [r11, #-13]
		
		for(y=0 ; y<=59 ; y++)
 2f4:	e3a03000 	mov	r3, #0
 2f8:	e50b300c 	str	r3, [r11, #-12]
 2fc:	ea000013 	b	350 <test_byte+0x70>
			for(x=0 ; x<=79 ; x+=3)
 300:	e3a03000 	mov	r3, #0
 304:	e50b3008 	str	r3, [r11, #-8]
 308:	ea00000a 	b	338 <test_byte+0x58>
				VGA_write_byte_ASM(x,y,c++);
 30c:	e55b300d 	ldrb	r3, [r11, #-13]
 310:	e55b200d 	ldrb	r2, [r11, #-13]
 314:	e2822001 	add	r2, r2, #1
 318:	e54b200d 	strb	r2, [r11, #-13]
 31c:	e51b0008 	ldr	r0, [r11, #-8]
 320:	e51b100c 	ldr	r1, [r11, #-12]
 324:	e1a02003 	mov	r2, r3
 328:	eb000097 	bl	58c <VGA_write_byte_ASM>
	void test_byte() {
		int x,y;
		char c = 0;
		
		for(y=0 ; y<=59 ; y++)
			for(x=0 ; x<=79 ; x+=3)
 32c:	e51b3008 	ldr	r3, [r11, #-8]
 330:	e2833003 	add	r3, r3, #3
 334:	e50b3008 	str	r3, [r11, #-8]
 338:	e51b3008 	ldr	r3, [r11, #-8]
 33c:	e353004f 	cmp	r3, #79	; 0x4f
 340:	dafffff1 	ble	30c <test_byte+0x2c>

	void test_byte() {
		int x,y;
		char c = 0;
		
		for(y=0 ; y<=59 ; y++)
 344:	e51b300c 	ldr	r3, [r11, #-12]
 348:	e2833001 	add	r3, r3, #1
 34c:	e50b300c 	str	r3, [r11, #-12]
 350:	e51b300c 	ldr	r3, [r11, #-12]
 354:	e353003b 	cmp	r3, #59	; 0x3b
 358:	daffffe8 	ble	300 <test_byte+0x20>
			for(x=0 ; x<=79 ; x+=3)
				VGA_write_byte_ASM(x,y,c++);
	}
 35c:	e24bd004 	sub	sp, r11, #4
 360:	e8bd8800 	pop	{r11, pc}

00000364 <test_pixel>:

	void test_pixel() {
 364:	e92d4800 	push	{r11, lr}
 368:	e28db004 	add	r11, sp, #4
 36c:	e24dd010 	sub	sp, sp, #16
		int x,y;
		unsigned short colour =0;
 370:	e3a03000 	mov	r3, #0
 374:	e14b30be 	strh	r3, [r11, #-14]
		
		for(y=0 ; y<=239 ; y++)
 378:	e3a03000 	mov	r3, #0
 37c:	e50b300c 	str	r3, [r11, #-12]
 380:	ea000015 	b	3dc <test_pixel+0x78>
			for(x=0 ; x<=319 ; x++)
 384:	e3a03000 	mov	r3, #0
 388:	e50b3008 	str	r3, [r11, #-8]
 38c:	ea00000b 	b	3c0 <test_pixel+0x5c>
				VGA_draw_point_ASM(x,y,colour++);
 390:	e15b30be 	ldrh	r3, [r11, #-14]
 394:	e15b20be 	ldrh	r2, [r11, #-14]
 398:	e2822001 	add	r2, r2, #1
 39c:	e14b20be 	strh	r2, [r11, #-14]
 3a0:	e6bf3073 	sxth	r3, r3
 3a4:	e51b0008 	ldr	r0, [r11, #-8]
 3a8:	e51b100c 	ldr	r1, [r11, #-12]
 3ac:	e1a02003 	mov	r2, r3
 3b0:	eb00004a 	bl	4e0 <VGA_draw_point_ASM>
	void test_pixel() {
		int x,y;
		unsigned short colour =0;
		
		for(y=0 ; y<=239 ; y++)
			for(x=0 ; x<=319 ; x++)
 3b4:	e51b3008 	ldr	r3, [r11, #-8]
 3b8:	e2833001 	add	r3, r3, #1
 3bc:	e50b3008 	str	r3, [r11, #-8]
 3c0:	e51b2008 	ldr	r2, [r11, #-8]
 3c4:	e300313f 	movw	r3, #319	; 0x13f
 3c8:	e1520003 	cmp	r2, r3
 3cc:	daffffef 	ble	390 <test_pixel+0x2c>

	void test_pixel() {
		int x,y;
		unsigned short colour =0;
		
		for(y=0 ; y<=239 ; y++)
 3d0:	e51b300c 	ldr	r3, [r11, #-12]
 3d4:	e2833001 	add	r3, r3, #1
 3d8:	e50b300c 	str	r3, [r11, #-12]
 3dc:	e51b300c 	ldr	r3, [r11, #-12]
 3e0:	e35300ef 	cmp	r3, #239	; 0xef
 3e4:	daffffe6 	ble	384 <test_pixel+0x20>
			for(x=0 ; x<=319 ; x++)
				VGA_draw_point_ASM(x,y,colour++);
	}
 3e8:	e24bd004 	sub	sp, r11, #4
 3ec:	e8bd8800 	pop	{r11, pc}

000003f0 <main>:


int main(){ 
 3f0:	e92d4800 	push	{r11, lr}
 3f4:	e28db004 	add	r11, sp, #4
 3f8:	e24dd018 	sub	sp, sp, #24
		}
	}
*/

//Audio
	int frequency = 100; 
 3fc:	e3a03064 	mov	r3, #100	; 0x64
 400:	e50b3010 	str	r3, [r11, #-16]
	int sRate = 48000; 
 404:	e30b3b80 	movw	r3, #48000	; 0xbb80
 408:	e50b3014 	str	r3, [r11, #-20]	; 0xffffffec
	int sR = (sRate/frequency)/2; 
 40c:	e51b0014 	ldr	r0, [r11, #-20]	; 0xffffffec
 410:	e51b1010 	ldr	r1, [r11, #-16]
 414:	eb0000dd 	bl	790 <__aeabi_idiv>
 418:	e1a03000 	mov	r3, r0
 41c:	e1a02fa3 	lsr	r2, r3, #31
 420:	e0823003 	add	r3, r2, r3
 424:	e1a030c3 	asr	r3, r3, #1
 428:	e50b3018 	str	r3, [r11, #-24]	; 0xffffffe8
	int i = 0; 
 42c:	e3a03000 	mov	r3, #0
 430:	e50b3008 	str	r3, [r11, #-8]
	int signal = 0x00FFFFFF;
 434:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
 438:	e50b300c 	str	r3, [r11, #-12]
 43c:	ea000000 	b	444 <main+0x54>
				} else {
					signal = 0;
				}	
			}
		}
	}
 440:	e1a00000 	nop			; (mov r0, r0)
	int sRate = 48000; 
	int sR = (sRate/frequency)/2; 
	int i = 0; 
	int signal = 0x00FFFFFF;
	while(1){
		if(write_audio_data(signal)){
 444:	e51b000c 	ldr	r0, [r11, #-12]
 448:	eb0000ba 	bl	738 <write_audio_data>
 44c:	e1a03000 	mov	r3, r0
 450:	e3530000 	cmp	r3, #0
 454:	0afffff9 	beq	440 <main+0x50>
				i++;
 458:	e51b3008 	ldr	r3, [r11, #-8]
 45c:	e2833001 	add	r3, r3, #1
 460:	e50b3008 	str	r3, [r11, #-8]
			
			if (i > sR) {
 464:	e51b2008 	ldr	r2, [r11, #-8]
 468:	e51b3018 	ldr	r3, [r11, #-24]	; 0xffffffe8
 46c:	e1520003 	cmp	r2, r3
 470:	dafffff2 	ble	440 <main+0x50>
				i =0;
 474:	e3a03000 	mov	r3, #0
 478:	e50b3008 	str	r3, [r11, #-8]
				if (signal == 0) {
 47c:	e51b300c 	ldr	r3, [r11, #-12]
 480:	e3530000 	cmp	r3, #0
 484:	1a000002 	bne	494 <main+0xa4>
				signal = 0x00FFFFFF;
 488:	e3e034ff 	mvn	r3, #-16777216	; 0xff000000
 48c:	e50b300c 	str	r3, [r11, #-12]
				} else {
					signal = 0;
				}	
			}
		}
	}
 490:	eaffffea 	b	440 <main+0x50>
			if (i > sR) {
				i =0;
				if (signal == 0) {
				signal = 0x00FFFFFF;
				} else {
					signal = 0;
 494:	e3a03000 	mov	r3, #0
 498:	e50b300c 	str	r3, [r11, #-12]
				}	
			}
		}
	}
 49c:	eaffffe7 	b	440 <main+0x50>

000004a0 <VGA_clear_pixelbuff_ASM>:
	.global VGA_write_char_ASM
	.global VGA_write_byte_ASM
	.global VGA_draw_point_ASM
		
VGA_clear_pixelbuff_ASM:
	PUSH {R4-R5}	
 4a0:	e92d0030 	push	{r4, r5}
	MOV R2, #0
 4a4:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_PIXEL_BUF_BASE
 4a8:	e3a03332 	mov	r3, #-939524096	; 0xc8000000

	MOV R0, #0
 4ac:	e3a00000 	mov	r0, #0

000004b0 <PIXEL_LOOPX>:
PIXEL_LOOPX:
	MOV R1, #0
 4b0:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1
 4b4:	e0834080 	add	r4, r3, r0, lsl #1

000004b8 <PIXEL_LOOPY>:
PIXEL_LOOPY:
	ADD R5, R4, R1, LSL #10
 4b8:	e0845501 	add	r5, r4, r1, lsl #10
	
	STRH R2, [R5]
 4bc:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1, #1
 4c0:	e2811001 	add	r1, r1, #1
	CMP R1, #240
 4c4:	e35100f0 	cmp	r1, #240	; 0xf0
	BLT PIXEL_LOOPY
 4c8:	bafffffa 	blt	4b8 <PIXEL_LOOPY>
	
	ADD R0, R0, #1
 4cc:	e2800001 	add	r0, r0, #1
	CMP R0, #320
 4d0:	e3500d05 	cmp	r0, #320	; 0x140
	BLT PIXEL_LOOPX
 4d4:	bafffff5 	blt	4b0 <PIXEL_LOOPX>

	POP {R4-R5}
 4d8:	e8bd0030 	pop	{r4, r5}
	BX LR
 4dc:	e12fff1e 	bx	lr

000004e0 <VGA_draw_point_ASM>:

VGA_draw_point_ASM:
	LDR R3, =319 // x coordinate
 4e0:	e59f3120 	ldr	r3, [pc, #288]	; 608 <HEX_ASCII+0x10>
	CMP R0, #0
 4e4:	e3500000 	cmp	r0, #0
	BXLT LR
 4e8:	b12fff1e 	bxlt	lr
	CMP R1, #0 //y coordinate
 4ec:	e3510000 	cmp	r1, #0
	BXLT LR
 4f0:	b12fff1e 	bxlt	lr
	CMP R0, R3 // compare x coord to its max value
 4f4:	e1500003 	cmp	r0, r3
	BXGT LR
 4f8:	c12fff1e 	bxgt	lr
	CMP R1, #239 //compare y coord to max value
 4fc:	e35100ef 	cmp	r1, #239	; 0xef
	BXGT LR
 500:	c12fff1e 	bxgt	lr
	
	LDR R3, =VGA_PIXEL_BUF_BASE
 504:	e3a03332 	mov	r3, #-939524096	; 0xc8000000
	ADD R3, R3, R0, LSL #1 // pushes x coordinate one bit to the left
 508:	e0833080 	add	r3, r3, r0, lsl #1
	ADD R3, R3, R1, LSL #10 //pushes y coordinate one bit to the left , R3 contains the x , y  and base address 
 50c:	e0833501 	add	r3, r3, r1, lsl #10
	STRH R2, [R3] //store the halfword pixel (write on screen)
 510:	e1c320b0 	strh	r2, [r3]
	BX LR
 514:	e12fff1e 	bx	lr

00000518 <VGA_clear_charbuff_ASM>:
	
VGA_clear_charbuff_ASM:
	PUSH {R3-R4}
 518:	e92d0018 	push	{r3, r4}
	MOV R2, #0
 51c:	e3a02000 	mov	r2, #0
	LDR R3, =VGA_CHAR_BUF_BASE
 520:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	MOV R0, #0 //x coord
 524:	e3a00000 	mov	r0, #0

00000528 <LOOP1>:
LOOP1: 
	MOV R1, #0 // y coord
 528:	e3a01000 	mov	r1, #0
	ADD R4, R3, R0, LSL #1
 52c:	e0834080 	add	r4, r3, r0, lsl #1

00000530 <LOOP2>:
LOOP2:
	ADD R5, R4, R1, LSL #7
 530:	e0845381 	add	r5, r4, r1, lsl #7
	STRH R2, [R5]
 534:	e1c520b0 	strh	r2, [r5]
	
	ADD R1, R1,#1
 538:	e2811001 	add	r1, r1, #1
	CMP R1, #60
 53c:	e351003c 	cmp	r1, #60	; 0x3c
	BLT LOOP2
 540:	bafffffa 	blt	530 <LOOP2>
	
	ADD R0, R0, #1
 544:	e2800001 	add	r0, r0, #1
	CMP R0, #80
 548:	e3500050 	cmp	r0, #80	; 0x50
	BLT LOOP1
 54c:	bafffff5 	blt	528 <LOOP1>
	
	POP {R4-R5}
 550:	e8bd0030 	pop	{r4, r5}
	BX LR
 554:	e12fff1e 	bx	lr

00000558 <VGA_write_char_ASM>:

VGA_write_char_ASM:
	LDR R3 ,=VGA_CHAR_BUF_BASE
 558:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	CMP R0, #0
 55c:	e3500000 	cmp	r0, #0
	BXLT LR
 560:	b12fff1e 	bxlt	lr
	CMP R1, #0
 564:	e3510000 	cmp	r1, #0
	BXLT LR
 568:	b12fff1e 	bxlt	lr
	CMP R0, #79
 56c:	e350004f 	cmp	r0, #79	; 0x4f
	BXGT LR
 570:	c12fff1e 	bxgt	lr
	CMP R1, #59
 574:	e351003b 	cmp	r1, #59	; 0x3b
	BXGT LR
 578:	c12fff1e 	bxgt	lr
	
	ADD R3, R3, R0
 57c:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7
 580:	e0833381 	add	r3, r3, r1, lsl #7
	STRB R2, [R3]
 584:	e5c32000 	strb	r2, [r3]

	BX LR
 588:	e12fff1e 	bx	lr

0000058c <VGA_write_byte_ASM>:
	
VGA_write_byte_ASM:
	LDR R3 ,=VGA_CHAR_BUF_BASE //checking limits
 58c:	e3a034c9 	mov	r3, #-922746880	; 0xc9000000
	CMP R0, #0
 590:	e3500000 	cmp	r0, #0
	BXLT LR
 594:	b12fff1e 	bxlt	lr
	CMP R1, #0
 598:	e3510000 	cmp	r1, #0
	BXLT LR
 59c:	b12fff1e 	bxlt	lr
	CMP R0, #79
 5a0:	e350004f 	cmp	r0, #79	; 0x4f
	BXGT LR
 5a4:	c12fff1e 	bxgt	lr
	CMP R1, #59
 5a8:	e351003b 	cmp	r1, #59	; 0x3b
	BXGT LR
 5ac:	c12fff1e 	bxgt	lr
	
	MOV R5, #0
 5b0:	e3a05000 	mov	r5, #0
	MOV R6, #0
 5b4:	e3a06000 	mov	r6, #0
	MOV R7, #0
 5b8:	e3a07000 	mov	r7, #0

	PUSH {R5-R7}
 5bc:	e92d00e0 	push	{r5, r6, r7}
	
	ADD R3, R3, R0
 5c0:	e0833000 	add	r3, r3, r0
	ADD R3, R3, R1, LSL #7
 5c4:	e0833381 	add	r3, r3, r1, lsl #7
	AND R5, R2, #0xF0  //240
 5c8:	e20250f0 	and	r5, r2, #240	; 0xf0
	AND R6, R2, #0x0F //15 clear everything except first byte
 5cc:	e202600f 	and	r6, r2, #15
	LSR R5, R5, #4
 5d0:	e1a05225 	lsr	r5, r5, #4

	LDR R4, =HEX_ASCII
 5d4:	e59f4030 	ldr	r4, [pc, #48]	; 60c <HEX_ASCII+0x14>
	ADD R7, R4, R6
 5d8:	e0847006 	add	r7, r4, r6
	ADD R4, R4, R5
 5dc:	e0844005 	add	r4, r4, r5
	LDRB R4, [R4]
 5e0:	e5d44000 	ldrb	r4, [r4]
	STRB R4, [R3]
 5e4:	e5c34000 	strb	r4, [r3]

	LDRB R7, [R7]
 5e8:	e5d77000 	ldrb	r7, [r7]
	STRB R7, [R3, #1]
 5ec:	e5c37001 	strb	r7, [r3, #1]
	POP {R5-R7}
 5f0:	e8bd00e0 	pop	{r5, r6, r7}
	
	 
	
	BX LR
 5f4:	e12fff1e 	bx	lr

000005f8 <HEX_ASCII>:
 5f8:	33323130 	.word	0x33323130
 5fc:	37363534 	.word	0x37363534
 600:	42413938 	.word	0x42413938
 604:	46454443 	.word	0x46454443

	POP {R4-R5}
	BX LR

VGA_draw_point_ASM:
	LDR R3, =319 // x coordinate
 608:	0000013f 	.word	0x0000013f
	ADD R3, R3, R1, LSL #7
	AND R5, R2, #0xF0  //240
	AND R6, R2, #0x0F //15 clear everything except first byte
	LSR R5, R5, #4

	LDR R4, =HEX_ASCII
 60c:	000005f8 	.word	0x000005f8

00000610 <read_PB_data_ASM>:
	.global disable_PB_INT_ASM
	
	.global config_PB_ASM

read_PB_data_ASM:
	PUSH {R1}
 610:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =BT_BASE
 614:	e59f10c8 	ldr	r1, [pc, #200]	; 6e4 <config_PB_ASM+0x18>
	LDR R0, [R1]
 618:	e5910000 	ldr	r0, [r1]
	POP {R1}
 61c:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 620:	e12fff1e 	bx	lr

00000624 <PB_data_is_pressed_ASM>:

PB_data_is_pressed_ASM:
	PUSH {R1-R3}
 624:	e92d000e 	push	{r1, r2, r3}
	LDR R1, =BT_BASE // R1 contains base address of pushbutton parallel port
 628:	e59f10b4 	ldr	r1, [pc, #180]	; 6e4 <config_PB_ASM+0x18>
	LDR R2, [R1] // R2 contains buttons within pushbutton parallel port that are on
 62c:	e5912000 	ldr	r2, [r1]
	AND R3, R2, R0 // R0 contains whose pressed status you wish to check
 630:	e0023000 	and	r3, r2, r0
	CMP R3, R0
 634:	e1530000 	cmp	r3, r0
	MOVEQ R0, #1 // return true if button is pressed
 638:	03a00001 	moveq	r0, #1
	MOVNE R0, #0 // return false if button is not pressed
 63c:	13a00000 	movne	r0, #0
	POP {R1-R3}
 640:	e8bd000e 	pop	{r1, r2, r3}
	BX LR
 644:	e12fff1e 	bx	lr

00000648 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
	PUSH {R1}
 648:	e52d1004 	push	{r1}		; (str r1, [sp, #-4]!)
	LDR R1, =EDGE_CAP
 64c:	e59f1094 	ldr	r1, [pc, #148]	; 6e8 <config_PB_ASM+0x1c>
	LDR R0, [R1]
 650:	e5910000 	ldr	r0, [r1]
	POP {R1}
 654:	e49d1004 	pop	{r1}		; (ldr r1, [sp], #4)
	BX LR
 658:	e12fff1e 	bx	lr

0000065c <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
	PUSH {R1-R3}
 65c:	e92d000e 	push	{r1, r2, r3}
	LDR R1, =EDGE_CAP // R1 contains edge capture address of pushbutton parallel port
 660:	e59f1080 	ldr	r1, [pc, #128]	; 6e8 <config_PB_ASM+0x1c>
	LDR R2, [R1] // R2 contains value stored within edge capture address
 664:	e5912000 	ldr	r2, [r1]
	AND R3, R2, R0 // R0 contains whose edge capture status you wish to check
 668:	e0023000 	and	r3, r2, r0
	CMP R3, R0
 66c:	e1530000 	cmp	r3, r0
	MOVEQ R0, #1 // return true if edge capture bit of that button is on
 670:	03a00001 	moveq	r0, #1
	MOVNE R0, #0 // return true if edge capture bit of that button is off
 674:	13a00000 	movne	r0, #0
	POP {R1-R3}
 678:	e8bd000e 	pop	{r1, r2, r3}
	BX LR
 67c:	e12fff1e 	bx	lr

00000680 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
	PUSH {R1-R2}
 680:	e92d0006 	push	{r1, r2}
	LDR R1, =EDGE_CAP // R1 contains address of edge cap register
 684:	e59f105c 	ldr	r1, [pc, #92]	; 6e8 <config_PB_ASM+0x1c>
	BIC R2, R1, R0 // R0 contains button whose edge cap you want to clear (complemented); R2 contains new value to be stored in edge cap register
 688:	e1c12000 	bic	r2, r1, r0
	STR R2, [R1] // update edge capture register
 68c:	e5812000 	str	r2, [r1]
	POP {R1-R2}
 690:	e8bd0006 	pop	{r1, r2}
	BX LR
 694:	e12fff1e 	bx	lr

00000698 <enable_PB_INT_ASM>:
	

enable_PB_INT_ASM:
	PUSH {R1-R2}
 698:	e92d0006 	push	{r1, r2}
	LDR R1, =INT_BASE
 69c:	e59f1048 	ldr	r1, [pc, #72]	; 6ec <config_PB_ASM+0x20>
	LDR R2, [R1] // R2 contains value of interrupt mask register
 6a0:	e5912000 	ldr	r2, [r1]
	ORR R2, R2, R0 // R0 contains button whose interrupt you want to enable; R2 contains new value to be stored in interrupt mask register
 6a4:	e1822000 	orr	r2, r2, r0
	STR R2, [R1] // update interrupt mask register
 6a8:	e5812000 	str	r2, [r1]
	POP {R1-R2}
 6ac:	e8bd0006 	pop	{r1, r2}
	BX LR
 6b0:	e12fff1e 	bx	lr

000006b4 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
	PUSH {R1-R2}
 6b4:	e92d0006 	push	{r1, r2}
	LDR R1, =INT_BASE // R1 contains address of interrupt mask register
 6b8:	e59f102c 	ldr	r1, [pc, #44]	; 6ec <config_PB_ASM+0x20>
	BIC R2, R1, R0 // R0 contains button whose edge cap you want to clear (complemented); R2 contains new value to be stored in edge cap register
 6bc:	e1c12000 	bic	r2, r1, r0
	STR R2, [R1] // update interrupt mask register
 6c0:	e5812000 	str	r2, [r1]
	POP {R1-R2}
 6c4:	e8bd0006 	pop	{r1, r2}
	BX LR
 6c8:	e12fff1e 	bx	lr

000006cc <config_PB_ASM>:

config_PB_ASM:
	PUSH {R1-R2}
 6cc:	e92d0006 	push	{r1, r2}
	LDR R1, =INT_BASE // R1 contains address of interrupt mask register
 6d0:	e59f1014 	ldr	r1, [pc, #20]	; 6ec <config_PB_ASM+0x20>
	MOV R2, #0XF //set interrupt mask bits
 6d4:	e3a0200f 	mov	r2, #15
	STR R2, [R1]
 6d8:	e5812000 	str	r2, [r1]
	PUSH {R1-R2}
 6dc:	e92d0006 	push	{r1, r2}
	BX LR
 6e0:	e12fff1e 	bx	lr
	
	.global config_PB_ASM

read_PB_data_ASM:
	PUSH {R1}
	LDR R1, =BT_BASE
 6e4:	ff200050 	.word	0xff200050
	POP {R1-R3}
	BX LR

read_PB_edgecap_ASM:
	PUSH {R1}
	LDR R1, =EDGE_CAP
 6e8:	ff20005c 	.word	0xff20005c
	BX LR
	

enable_PB_INT_ASM:
	PUSH {R1-R2}
	LDR R1, =INT_BASE
 6ec:	ff200058 	.word	0xff200058

000006f0 <read_slider_switches_ASM>:
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, = SW_BASE 
 6f0:	e59f1004 	ldr	r1, [pc, #4]	; 6fc <read_slider_switches_ASM+0xc>
	LDR R0, [R1] 
 6f4:	e5910000 	ldr	r0, [r1]
	BX LR
 6f8:	e12fff1e 	bx	lr
	.text
	.equ SW_BASE, 0xFF200040
	.global read_slider_switches_ASM

read_slider_switches_ASM:
	LDR R1, = SW_BASE 
 6fc:	ff200040 	.word	0xff200040

00000700 <read_PS2_data_ASM>:
	
	.global read_PS2_data_ASM
	
	
read_PS2_data_ASM:
	PUSH {R1-R5}
 700:	e92d003e 	push	{r1, r2, r3, r4, r5}
	LDR R4, =PS_2_BASE 
 704:	e59f4028 	ldr	r4, [pc, #40]	; 734 <RETURN+0x14>
	LDR R5, [R4]	
 708:	e5945000 	ldr	r5, [r4]
	ANDS R3, R5, #0x8000 
 70c:	e2153902 	ands	r3, r5, #32768	; 0x8000
	BNE RETURN  
 710:	1a000002 	bne	720 <RETURN>
	MOV R0, #0	
 714:	e3a00000 	mov	r0, #0
	POP {R1-R5}
 718:	e8bd003e 	pop	{r1, r2, r3, r4, r5}
	BX LR
 71c:	e12fff1e 	bx	lr

00000720 <RETURN>:
	

RETURN: 
	AND R2, R5, #0xFF
 720:	e20520ff 	and	r2, r5, #255	; 0xff
	STRB R2, [R0]
 724:	e5c02000 	strb	r2, [r0]
	MOV R0, #1
 728:	e3a00001 	mov	r0, #1
	POP {R1-R5}
 72c:	e8bd003e 	pop	{r1, r2, r3, r4, r5}
	BX LR	
 730:	e12fff1e 	bx	lr
	.global read_PS2_data_ASM
	
	
read_PS2_data_ASM:
	PUSH {R1-R5}
	LDR R4, =PS_2_BASE 
 734:	ff200100 	.word	0xff200100

00000738 <write_audio_data>:
	.equ RIGHTDATA, 0xFF20304C
	
	.global write_audio_data
	
write_audio_data:
	PUSH {R1-R3}
 738:	e92d000e 	push	{r1, r2, r3}
	LDR R1, =AUDIO_PORT_FIFOSPACE 
 73c:	e59f1040 	ldr	r1, [pc, #64]	; 784 <NOSPACE+0xc>
	LDR R2, [R1] 
 740:	e5912000 	ldr	r2, [r1]
	AND R3, R2, #0x00FF0000 //Right space
 744:	e20238ff 	and	r3, r2, #16711680	; 0xff0000
	CMP R3, #0
 748:	e3530000 	cmp	r3, #0
	BEQ NOSPACE 
 74c:	0a000009 	beq	778 <NOSPACE>
	AND R3, R2, #0xFF000000 //Left space
 750:	e20234ff 	and	r3, r2, #-16777216	; 0xff000000
	CMP R3, #0
 754:	e3530000 	cmp	r3, #0
	BEQ NOSPACE 
 758:	0a000006 	beq	778 <NOSPACE>
	LDR R1, =LEFTDATA
 75c:	e59f1024 	ldr	r1, [pc, #36]	; 788 <NOSPACE+0x10>
	STR R0, [R1] 
 760:	e5810000 	str	r0, [r1]
	LDR R1, =RIGHTDATA
 764:	e59f1020 	ldr	r1, [pc, #32]	; 78c <NOSPACE+0x14>
	STR R0, [R1] 
 768:	e5810000 	str	r0, [r1]
	MOV R0, #1 
 76c:	e3a00001 	mov	r0, #1
	POP {R1-R3}
 770:	e8bd000e 	pop	{r1, r2, r3}
	BX LR
 774:	e12fff1e 	bx	lr

00000778 <NOSPACE>:

NOSPACE:
	MOV R0, #0 
 778:	e3a00000 	mov	r0, #0
	POP {R1-R3}
 77c:	e8bd000e 	pop	{r1, r2, r3}
	BX LR
 780:	e12fff1e 	bx	lr
	
	.global write_audio_data
	
write_audio_data:
	PUSH {R1-R3}
	LDR R1, =AUDIO_PORT_FIFOSPACE 
 784:	ff203044 	.word	0xff203044
	CMP R3, #0
	BEQ NOSPACE 
	AND R3, R2, #0xFF000000 //Left space
	CMP R3, #0
	BEQ NOSPACE 
	LDR R1, =LEFTDATA
 788:	ff203048 	.word	0xff203048
	STR R0, [R1] 
	LDR R1, =RIGHTDATA
 78c:	ff20304c 	.word	0xff20304c

00000790 <__aeabi_idiv>:
 790:	e3510000 	cmp	r1, #0
 794:	0a000043 	beq	8a8 <.divsi3_skip_div0_test+0x110>

00000798 <.divsi3_skip_div0_test>:
 798:	e020c001 	eor	r12, r0, r1
 79c:	42611000 	rsbmi	r1, r1, #0
 7a0:	e2512001 	subs	r2, r1, #1
 7a4:	0a000027 	beq	848 <.divsi3_skip_div0_test+0xb0>
 7a8:	e1b03000 	movs	r3, r0
 7ac:	42603000 	rsbmi	r3, r0, #0
 7b0:	e1530001 	cmp	r3, r1
 7b4:	9a000026 	bls	854 <.divsi3_skip_div0_test+0xbc>
 7b8:	e1110002 	tst	r1, r2
 7bc:	0a000028 	beq	864 <.divsi3_skip_div0_test+0xcc>
 7c0:	e311020e 	tst	r1, #-536870912	; 0xe0000000
 7c4:	01a01181 	lsleq	r1, r1, #3
 7c8:	03a02008 	moveq	r2, #8
 7cc:	13a02001 	movne	r2, #1
 7d0:	e3510201 	cmp	r1, #268435456	; 0x10000000
 7d4:	31510003 	cmpcc	r1, r3
 7d8:	31a01201 	lslcc	r1, r1, #4
 7dc:	31a02202 	lslcc	r2, r2, #4
 7e0:	3afffffa 	bcc	7d0 <.divsi3_skip_div0_test+0x38>
 7e4:	e3510102 	cmp	r1, #-2147483648	; 0x80000000
 7e8:	31510003 	cmpcc	r1, r3
 7ec:	31a01081 	lslcc	r1, r1, #1
 7f0:	31a02082 	lslcc	r2, r2, #1
 7f4:	3afffffa 	bcc	7e4 <.divsi3_skip_div0_test+0x4c>
 7f8:	e3a00000 	mov	r0, #0
 7fc:	e1530001 	cmp	r3, r1
 800:	20433001 	subcs	r3, r3, r1
 804:	21800002 	orrcs	r0, r0, r2
 808:	e15300a1 	cmp	r3, r1, lsr #1
 80c:	204330a1 	subcs	r3, r3, r1, lsr #1
 810:	218000a2 	orrcs	r0, r0, r2, lsr #1
 814:	e1530121 	cmp	r3, r1, lsr #2
 818:	20433121 	subcs	r3, r3, r1, lsr #2
 81c:	21800122 	orrcs	r0, r0, r2, lsr #2
 820:	e15301a1 	cmp	r3, r1, lsr #3
 824:	204331a1 	subcs	r3, r3, r1, lsr #3
 828:	218001a2 	orrcs	r0, r0, r2, lsr #3
 82c:	e3530000 	cmp	r3, #0
 830:	11b02222 	lsrsne	r2, r2, #4
 834:	11a01221 	lsrne	r1, r1, #4
 838:	1affffef 	bne	7fc <.divsi3_skip_div0_test+0x64>
 83c:	e35c0000 	cmp	r12, #0
 840:	42600000 	rsbmi	r0, r0, #0
 844:	e12fff1e 	bx	lr
 848:	e13c0000 	teq	r12, r0
 84c:	42600000 	rsbmi	r0, r0, #0
 850:	e12fff1e 	bx	lr
 854:	33a00000 	movcc	r0, #0
 858:	01a00fcc 	asreq	r0, r12, #31
 85c:	03800001 	orreq	r0, r0, #1
 860:	e12fff1e 	bx	lr
 864:	e3510801 	cmp	r1, #65536	; 0x10000
 868:	21a01821 	lsrcs	r1, r1, #16
 86c:	23a02010 	movcs	r2, #16
 870:	33a02000 	movcc	r2, #0
 874:	e3510c01 	cmp	r1, #256	; 0x100
 878:	21a01421 	lsrcs	r1, r1, #8
 87c:	22822008 	addcs	r2, r2, #8
 880:	e3510010 	cmp	r1, #16
 884:	21a01221 	lsrcs	r1, r1, #4
 888:	22822004 	addcs	r2, r2, #4
 88c:	e3510004 	cmp	r1, #4
 890:	82822003 	addhi	r2, r2, #3
 894:	908220a1 	addls	r2, r2, r1, lsr #1
 898:	e35c0000 	cmp	r12, #0
 89c:	e1a00233 	lsr	r0, r3, r2
 8a0:	42600000 	rsbmi	r0, r0, #0
 8a4:	e12fff1e 	bx	lr
 8a8:	e3500000 	cmp	r0, #0
 8ac:	c3e00102 	mvngt	r0, #-2147483648	; 0x80000000
 8b0:	b3a00102 	movlt	r0, #-2147483648	; 0x80000000
 8b4:	ea000007 	b	8d8 <__aeabi_idiv0>

000008b8 <__aeabi_idivmod>:
 8b8:	e3510000 	cmp	r1, #0
 8bc:	0afffff9 	beq	8a8 <.divsi3_skip_div0_test+0x110>
 8c0:	e92d4003 	push	{r0, r1, lr}
 8c4:	ebffffb3 	bl	798 <.divsi3_skip_div0_test>
 8c8:	e8bd4006 	pop	{r1, r2, lr}
 8cc:	e0030092 	mul	r3, r2, r0
 8d0:	e0411003 	sub	r1, r1, r3
 8d4:	e12fff1e 	bx	lr

000008d8 <__aeabi_idiv0>:
 8d8:	e12fff1e 	bx	lr

000008dc <atexit>:
 8dc:	e1a01000 	mov	r1, r0
 8e0:	e3a00000 	mov	r0, #0
 8e4:	e92d4008 	push	{r3, lr}
 8e8:	e1a02000 	mov	r2, r0
 8ec:	e1a03000 	mov	r3, r0
 8f0:	eb00000e 	bl	930 <__register_exitproc>
 8f4:	e8bd4008 	pop	{r3, lr}
 8f8:	e12fff1e 	bx	lr

000008fc <exit>:
 8fc:	e92d4008 	push	{r3, lr}
 900:	e3a01000 	mov	r1, #0
 904:	e1a04000 	mov	r4, r0
 908:	eb000045 	bl	a24 <__call_exitprocs>
 90c:	e59f3018 	ldr	r3, [pc, #24]	; 92c <exit+0x30>
 910:	e5930000 	ldr	r0, [r3]
 914:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 918:	e3530000 	cmp	r3, #0
 91c:	11a0e00f 	movne	lr, pc
 920:	112fff13 	bxne	r3
 924:	e1a00004 	mov	r0, r4
 928:	eb0000c9 	bl	c54 <_exit>
 92c:	00000d14 	.word	0x00000d14

00000930 <__register_exitproc>:
 930:	e59fc0e4 	ldr	r12, [pc, #228]	; a1c <__register_exitproc+0xec>
 934:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 938:	e59c4000 	ldr	r4, [r12]
 93c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 940:	e35c0000 	cmp	r12, #0
 944:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 948:	e59c5004 	ldr	r5, [r12, #4]
 94c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 950:	e355001f 	cmp	r5, #31
 954:	e24dd010 	sub	sp, sp, #16
 958:	e1a06000 	mov	r6, r0
 95c:	da000015 	ble	9b8 <__register_exitproc+0x88>
 960:	e59f00b8 	ldr	r0, [pc, #184]	; a20 <__register_exitproc+0xf0>
 964:	e3500000 	cmp	r0, #0
 968:	1a000001 	bne	974 <__register_exitproc+0x44>
 96c:	e3e00000 	mvn	r0, #0
 970:	ea000018 	b	9d8 <__register_exitproc+0xa8>
 974:	e3a00e19 	mov	r0, #400	; 0x190
 978:	e58d100c 	str	r1, [sp, #12]
 97c:	e58d2008 	str	r2, [sp, #8]
 980:	e58d3004 	str	r3, [sp, #4]
 984:	e320f000 	nop	{0}
 988:	e250c000 	subs	r12, r0, #0
 98c:	e59d100c 	ldr	r1, [sp, #12]
 990:	e59d2008 	ldr	r2, [sp, #8]
 994:	e59d3004 	ldr	r3, [sp, #4]
 998:	0afffff3 	beq	96c <__register_exitproc+0x3c>
 99c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 9a0:	e3a00000 	mov	r0, #0
 9a4:	e58c0004 	str	r0, [r12, #4]
 9a8:	e58c5000 	str	r5, [r12]
 9ac:	e584c148 	str	r12, [r4, #328]	; 0x148
 9b0:	e58c0188 	str	r0, [r12, #392]	; 0x188
 9b4:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 9b8:	e3560000 	cmp	r6, #0
 9bc:	e59c4004 	ldr	r4, [r12, #4]
 9c0:	1a000007 	bne	9e4 <__register_exitproc+0xb4>
 9c4:	e2843002 	add	r3, r4, #2
 9c8:	e2844001 	add	r4, r4, #1
 9cc:	e78c1103 	str	r1, [r12, r3, lsl #2]
 9d0:	e58c4004 	str	r4, [r12, #4]
 9d4:	e3a00000 	mov	r0, #0
 9d8:	e28dd010 	add	sp, sp, #16
 9dc:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 9e0:	e12fff1e 	bx	lr
 9e4:	e3a00001 	mov	r0, #1
 9e8:	e1a00410 	lsl	r0, r0, r4
 9ec:	e08c8104 	add	r8, r12, r4, lsl #2
 9f0:	e3560002 	cmp	r6, #2
 9f4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 9f8:	e5883108 	str	r3, [r8, #264]	; 0x108
 9fc:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 a00:	e1877000 	orr	r7, r7, r0
 a04:	01830000 	orreq	r0, r3, r0
 a08:	e1a05008 	mov	r5, r8
 a0c:	e5882088 	str	r2, [r8, #136]	; 0x88
 a10:	e58c7188 	str	r7, [r12, #392]	; 0x188
 a14:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 a18:	eaffffe9 	b	9c4 <__register_exitproc+0x94>
 a1c:	00000d14 	.word	0x00000d14
 a20:	00000000 	.word	0x00000000

00000a24 <__call_exitprocs>:
 a24:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 a28:	e59f3168 	ldr	r3, [pc, #360]	; b98 <__call_exitprocs+0x174>
 a2c:	e5933000 	ldr	r3, [r3]
 a30:	e24dd014 	sub	sp, sp, #20
 a34:	e58d3004 	str	r3, [sp, #4]
 a38:	e2833f52 	add	r3, r3, #328	; 0x148
 a3c:	e58d0008 	str	r0, [sp, #8]
 a40:	e58d300c 	str	r3, [sp, #12]
 a44:	e1a07001 	mov	r7, r1
 a48:	e3a08001 	mov	r8, #1
 a4c:	e59d3004 	ldr	r3, [sp, #4]
 a50:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 a54:	e3560000 	cmp	r6, #0
 a58:	e59db00c 	ldr	r11, [sp, #12]
 a5c:	0a000033 	beq	b30 <__call_exitprocs+0x10c>
 a60:	e5965004 	ldr	r5, [r6, #4]
 a64:	e2554001 	subs	r4, r5, #1
 a68:	5286a088 	addpl	r10, r6, #136	; 0x88
 a6c:	5285501f 	addpl	r5, r5, #31
 a70:	508a5105 	addpl	r5, r10, r5, lsl #2
 a74:	5a000007 	bpl	a98 <__call_exitprocs+0x74>
 a78:	ea000029 	b	b24 <__call_exitprocs+0x100>
 a7c:	e5953000 	ldr	r3, [r5]
 a80:	e1530007 	cmp	r3, r7
 a84:	0a000005 	beq	aa0 <__call_exitprocs+0x7c>
 a88:	e2444001 	sub	r4, r4, #1
 a8c:	e3740001 	cmn	r4, #1
 a90:	e2455004 	sub	r5, r5, #4
 a94:	0a000022 	beq	b24 <__call_exitprocs+0x100>
 a98:	e3570000 	cmp	r7, #0
 a9c:	1afffff6 	bne	a7c <__call_exitprocs+0x58>
 aa0:	e5963004 	ldr	r3, [r6, #4]
 aa4:	e06a2005 	rsb	r2, r10, r5
 aa8:	e2433001 	sub	r3, r3, #1
 aac:	e0862002 	add	r2, r6, r2
 ab0:	e1530004 	cmp	r3, r4
 ab4:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 ab8:	13a01000 	movne	r1, #0
 abc:	05864004 	streq	r4, [r6, #4]
 ac0:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 ac4:	e3530000 	cmp	r3, #0
 ac8:	0affffee 	beq	a88 <__call_exitprocs+0x64>
 acc:	e1a02418 	lsl	r2, r8, r4
 ad0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 ad4:	e1120001 	tst	r2, r1
 ad8:	e5969004 	ldr	r9, [r6, #4]
 adc:	0a000016 	beq	b3c <__call_exitprocs+0x118>
 ae0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 ae4:	e1120001 	tst	r2, r1
 ae8:	1a000016 	bne	b48 <__call_exitprocs+0x124>
 aec:	e59d0008 	ldr	r0, [sp, #8]
 af0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 af4:	e1a0e00f 	mov	lr, pc
 af8:	e12fff13 	bx	r3
 afc:	e5963004 	ldr	r3, [r6, #4]
 b00:	e1530009 	cmp	r3, r9
 b04:	1affffd0 	bne	a4c <__call_exitprocs+0x28>
 b08:	e59b3000 	ldr	r3, [r11]
 b0c:	e1530006 	cmp	r3, r6
 b10:	1affffcd 	bne	a4c <__call_exitprocs+0x28>
 b14:	e2444001 	sub	r4, r4, #1
 b18:	e3740001 	cmn	r4, #1
 b1c:	e2455004 	sub	r5, r5, #4
 b20:	1affffdc 	bne	a98 <__call_exitprocs+0x74>
 b24:	e59f1070 	ldr	r1, [pc, #112]	; b9c <__call_exitprocs+0x178>
 b28:	e3510000 	cmp	r1, #0
 b2c:	1a000009 	bne	b58 <__call_exitprocs+0x134>
 b30:	e28dd014 	add	sp, sp, #20
 b34:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 b38:	e12fff1e 	bx	lr
 b3c:	e1a0e00f 	mov	lr, pc
 b40:	e12fff13 	bx	r3
 b44:	eaffffec 	b	afc <__call_exitprocs+0xd8>
 b48:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 b4c:	e1a0e00f 	mov	lr, pc
 b50:	e12fff13 	bx	r3
 b54:	eaffffe8 	b	afc <__call_exitprocs+0xd8>
 b58:	e5963004 	ldr	r3, [r6, #4]
 b5c:	e3530000 	cmp	r3, #0
 b60:	e5963000 	ldr	r3, [r6]
 b64:	1a000008 	bne	b8c <__call_exitprocs+0x168>
 b68:	e3530000 	cmp	r3, #0
 b6c:	0a000006 	beq	b8c <__call_exitprocs+0x168>
 b70:	e1a00006 	mov	r0, r6
 b74:	e58b3000 	str	r3, [r11]
 b78:	e320f000 	nop	{0}
 b7c:	e59b6000 	ldr	r6, [r11]
 b80:	e3560000 	cmp	r6, #0
 b84:	1affffb5 	bne	a60 <__call_exitprocs+0x3c>
 b88:	eaffffe8 	b	b30 <__call_exitprocs+0x10c>
 b8c:	e1a0b006 	mov	r11, r6
 b90:	e1a06003 	mov	r6, r3
 b94:	eafffff9 	b	b80 <__call_exitprocs+0x15c>
 b98:	00000d14 	.word	0x00000d14
 b9c:	00000000 	.word	0x00000000

00000ba0 <register_fini>:
 ba0:	e92d4008 	push	{r3, lr}
 ba4:	e59f3010 	ldr	r3, [pc, #16]	; bbc <register_fini+0x1c>
 ba8:	e3530000 	cmp	r3, #0
 bac:	159f000c 	ldrne	r0, [pc, #12]	; bc0 <register_fini+0x20>
 bb0:	1bffff49 	blne	8dc <atexit>
 bb4:	e8bd4008 	pop	{r3, lr}
 bb8:	e12fff1e 	bx	lr
 bbc:	00000d3c 	.word	0x00000d3c
 bc0:	00000bc4 	.word	0x00000bc4

00000bc4 <__libc_fini_array>:
 bc4:	e92d4038 	push	{r3, r4, r5, lr}
 bc8:	e59f5030 	ldr	r5, [pc, #48]	; c00 <__libc_fini_array+0x3c>
 bcc:	e59f4030 	ldr	r4, [pc, #48]	; c04 <__libc_fini_array+0x40>
 bd0:	e0654004 	rsb	r4, r5, r4
 bd4:	e1b04144 	asrs	r4, r4, #2
 bd8:	10855104 	addne	r5, r5, r4, lsl #2
 bdc:	0a000004 	beq	bf4 <__libc_fini_array+0x30>
 be0:	e5353004 	ldr	r3, [r5, #-4]!
 be4:	e1a0e00f 	mov	lr, pc
 be8:	e12fff13 	bx	r3
 bec:	e2544001 	subs	r4, r4, #1
 bf0:	1afffffa 	bne	be0 <__libc_fini_array+0x1c>
 bf4:	eb000050 	bl	d3c <__libc_fini>
 bf8:	e8bd4038 	pop	{r3, r4, r5, lr}
 bfc:	e12fff1e 	bx	lr
 c00:	00000d54 	.word	0x00000d54
 c04:	00000d58 	.word	0x00000d58

00000c08 <__cs3_premain>:
 c08:	e92d4008 	push	{r3, lr}
 c0c:	eb00001d 	bl	c88 <__libc_init_array>
 c10:	e59f3030 	ldr	r3, [pc, #48]	; c48 <__cs3_premain+0x40>
 c14:	e3530000 	cmp	r3, #0
 c18:	15930000 	ldrne	r0, [r3]
 c1c:	01a00003 	moveq	r0, r3
 c20:	e59f3024 	ldr	r3, [pc, #36]	; c4c <__cs3_premain+0x44>
 c24:	e3530000 	cmp	r3, #0
 c28:	15931000 	ldrne	r1, [r3]
 c2c:	01a01003 	moveq	r1, r3
 c30:	e3a02000 	mov	r2, #0
 c34:	ebfffded 	bl	3f0 <main>
 c38:	e59f3010 	ldr	r3, [pc, #16]	; c50 <__cs3_premain+0x48>
 c3c:	e3530000 	cmp	r3, #0
 c40:	1bffff2d 	blne	8fc <exit>
 c44:	eafffffe 	b	c44 <__cs3_premain+0x3c>
	...
 c50:	000008fc 	.word	0x000008fc

00000c54 <_exit>:
 c54:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 c58:	e3a00018 	mov	r0, #24
 c5c:	e59f1004 	ldr	r1, [pc, #4]	; c68 <_exit+0x14>
 c60:	ef123456 	svc	0x00123456
 c64:	eafffffe 	b	c64 <_exit+0x10>
 c68:	00020026 	.word	0x00020026

00000c6c <__cs3_isr_interrupt>:
 c6c:	eafffffe 	b	c6c <__cs3_isr_interrupt>

00000c70 <__cs3_isr_undef>:
 c70:	eafffffe 	b	c70 <__cs3_isr_undef>

00000c74 <__cs3_isr_swi>:
 c74:	eafffffe 	b	c74 <__cs3_isr_swi>

00000c78 <__cs3_isr_pabort>:
 c78:	eafffffe 	b	c78 <__cs3_isr_pabort>

00000c7c <__cs3_isr_dabort>:
 c7c:	eafffffe 	b	c7c <__cs3_isr_dabort>

00000c80 <__cs3_isr_irq>:
 c80:	eafffffe 	b	c80 <__cs3_isr_irq>

00000c84 <__cs3_isr_fiq>:
 c84:	eafffffe 	b	c84 <__cs3_isr_fiq>

00000c88 <__libc_init_array>:
 c88:	e92d4070 	push	{r4, r5, r6, lr}
 c8c:	e59f506c 	ldr	r5, [pc, #108]	; d00 <__libc_init_array+0x78>
 c90:	e59f606c 	ldr	r6, [pc, #108]	; d04 <__libc_init_array+0x7c>
 c94:	e0656006 	rsb	r6, r5, r6
 c98:	e1b06146 	asrs	r6, r6, #2
 c9c:	12455004 	subne	r5, r5, #4
 ca0:	13a04000 	movne	r4, #0
 ca4:	0a000005 	beq	cc0 <__libc_init_array+0x38>
 ca8:	e5b53004 	ldr	r3, [r5, #4]!
 cac:	e2844001 	add	r4, r4, #1
 cb0:	e1a0e00f 	mov	lr, pc
 cb4:	e12fff13 	bx	r3
 cb8:	e1560004 	cmp	r6, r4
 cbc:	1afffff9 	bne	ca8 <__libc_init_array+0x20>
 cc0:	e59f5040 	ldr	r5, [pc, #64]	; d08 <__libc_init_array+0x80>
 cc4:	e59f6040 	ldr	r6, [pc, #64]	; d0c <__libc_init_array+0x84>
 cc8:	e0656006 	rsb	r6, r5, r6
 ccc:	eb000012 	bl	d1c <_init>
 cd0:	e1b06146 	asrs	r6, r6, #2
 cd4:	12455004 	subne	r5, r5, #4
 cd8:	13a04000 	movne	r4, #0
 cdc:	0a000005 	beq	cf8 <__libc_init_array+0x70>
 ce0:	e5b53004 	ldr	r3, [r5, #4]!
 ce4:	e2844001 	add	r4, r4, #1
 ce8:	e1a0e00f 	mov	lr, pc
 cec:	e12fff13 	bx	r3
 cf0:	e1560004 	cmp	r6, r4
 cf4:	1afffff9 	bne	ce0 <__libc_init_array+0x58>
 cf8:	e8bd4070 	pop	{r4, r5, r6, lr}
 cfc:	e12fff1e 	bx	lr
 d00:	00000d34 	.word	0x00000d34
 d04:	00000d34 	.word	0x00000d34
 d08:	00000d34 	.word	0x00000d34
 d0c:	00000d3c 	.word	0x00000d3c

Disassembly of section .rodata:

00000d14 <_global_impure_ptr>:
 d14:	00000d80 00000043                       ....C...

00000d1c <_init>:
 d1c:	e1a0c00d 	mov	r12, sp
 d20:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 d24:	e24cb004 	sub	r11, r12, #4
 d28:	e24bd028 	sub	sp, r11, #40	; 0x28
 d2c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 d30:	e12fff1e 	bx	lr

00000d34 <__init_array_start>:
 d34:	00000ba0 	.word	0x00000ba0

00000d38 <__frame_dummy_init_array_entry>:
 d38:	00000208                                ....

00000d3c <__libc_fini>:
 d3c:	e1a0c00d 	mov	r12, sp
 d40:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 d44:	e24cb004 	sub	r11, r12, #4
 d48:	e24bd028 	sub	sp, r11, #40	; 0x28
 d4c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 d50:	e12fff1e 	bx	lr

00000d54 <__fini_array_start>:
 d54:	000001c4 	.word	0x000001c4

00000d58 <__cs3_regions>:
 d58:	00000000 	.word	0x00000000
 d5c:	00000040 	.word	0x00000040
 d60:	00000040 	.word	0x00000040
 d64:	00001170 	.word	0x00001170
 d68:	00000020 	.word	0x00000020

00000d6c <__cs3_regions_end>:
 d6c:	00000000 	.word	0x00000000
